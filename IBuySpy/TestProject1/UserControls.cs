// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.20825.0
//
//      Specialized classes used in a coded UI test are defined in this file.
//      Required customizations may be made in this file.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject1
{
    using Microsoft.VisualStudio.TestTools.UITesting;
    using System;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;


    public abstract class HtmlControl : UITestControl
    {

        public HtmlControl() :
            this(null)
        {
        }

        public HtmlControl(UITestControl parent) :
            base(parent)
        {
        }

        public virtual string ClassName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.ClassName)));
            }
        }

        public virtual string FriendlyName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.FriendlyName)));
            }
        }

        public virtual string HelpText
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.HelpText)));
            }
        }

        public virtual bool HasFocus
        {
            get
            {
                return ((bool)(this.GetProperty(UITestControlProperties.Common.HasFocus)));
            }
        }

        public virtual object NativeElement
        {
            get
            {
                return ((object)(this.GetProperty(UITestControlProperties.Common.NativeElement)));
            }
        }

        public virtual string Class
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.Class)));
            }
        }

        public virtual string Id
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.Id)));
            }
        }

        public virtual string InnerText
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.InnerText)));
            }
        }

        public virtual int TagInstance
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Common.TagInstance)));
            }
        }

        public virtual string TagName
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.TagName)));
            }
        }

        public virtual string Title
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.Title)));
            }
        }

        public virtual string Type
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.Type)));
            }
        }

        public virtual string ValueAttribute
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.ValueAttribute)));
            }
        }

        public virtual string AccessKey
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.AccessKey)));
            }
        }

        public virtual string ControlDefinition
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Common.ControlDefinition)));
            }
        }
    }

    // Definition of Class HtmlImage.
    public class HtmlImage : HtmlControl
    {

        public HtmlImage() :
            this(null)
        {
        }

        public HtmlImage(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Image.ControlType, "Image");
            SearchProperties.Add(HtmlProperties.Image.TagName, "IMG");
        }

        public virtual string Alt
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Image.Alt)));
            }
        }

        public virtual string Src
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Image.Src)));
            }
        }

        public virtual string AbsolutePath
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Image.AbsolutePath)));
            }
        }

        public virtual string LinkAbsolutePath
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Image.LinkAbsolutePath)));
            }
        }

        public virtual string Href
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Image.Href)));
            }
        }
    }

    // Definition of Class HtmlEdit.
    public class HtmlEdit : HtmlControl
    {

        public HtmlEdit() :
            this(null)
        {
        }

        public HtmlEdit(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Edit.ControlType, "Edit");
            SearchProperties.Add(HtmlProperties.Edit.TagName, "INPUT");
        }

        public virtual string Text
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Edit.Text)));
            }
            set
            {
                this.SetProperty(HtmlProperties.Edit.Text, value);
            }
        }

        public virtual bool IsPassword
        {
            get
            {
                return ((bool)(this.GetProperty(HtmlProperties.Edit.IsPassword)));
            }
        }

        public virtual string DefaultText
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Edit.DefaultText)));
            }
        }

        public virtual string CopyPastedText
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Edit.CopyPastedText)));
            }
            set
            {
                this.SetProperty(HtmlProperties.Edit.CopyPastedText, value);
            }
        }

        public virtual string LabeledBy
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Edit.LabeledBy)));
            }
        }

        public virtual bool ReadOnly
        {
            get
            {
                return ((bool)(this.GetProperty(HtmlProperties.Edit.ReadOnly)));
            }
        }

        public virtual string Password
        {
            set
            {
                this.SetProperty(HtmlProperties.Edit.Password, value);
            }
        }
    }

    // Definition of Class HtmlInputButton.
    public class HtmlInputButton : HtmlControl
    {

        public HtmlInputButton() :
            this(null)
        {
        }

        public HtmlInputButton(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Button.ControlType, "Button");
            SearchProperties.Add(HtmlProperties.Button.TagName, "INPUT");
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Button.DisplayText)));
            }
        }
    }

    public abstract class WinControl : UITestControl
    {

        public WinControl() :
            this(null)
        {
        }

        public WinControl(UITestControl parent) :
            base(parent)
        {
            SearchConfigurations.Add(SearchConfiguration.VisibleOnly);
        }

        public virtual string ClassName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.ClassName)));
            }
        }

        public virtual string FriendlyName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.FriendlyName)));
            }
        }

        public virtual string HelpText
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.HelpText)));
            }
        }

        public virtual bool HasFocus
        {
            get
            {
                return ((bool)(this.GetProperty(UITestControlProperties.Common.HasFocus)));
            }
        }

        public virtual object NativeElement
        {
            get
            {
                return ((object)(this.GetProperty(UITestControlProperties.Common.NativeElement)));
            }
        }

        public virtual string AccessKey
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Common.AccessKey)));
            }
        }

        public virtual string ControlName
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Common.ControlName)));
            }
        }

        public virtual int ControlId
        {
            get
            {
                return ((int)(this.GetProperty(WinProperties.Common.ControlId)));
            }
        }
    }

    // Definition of Class WinClient.
    public class WinClient : WinControl
    {

        public WinClient() :
            this(null)
        {
        }

        public WinClient(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.Client.ControlType, "Client");
        }
    }

    // Definition of Class HtmlDocument.
    public class HtmlDocument : HtmlControl
    {

        public HtmlDocument() :
            this(null)
        {
        }

        public HtmlDocument(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Document.ControlType, "Document");
            SearchProperties.Add(HtmlProperties.Document.TagName, "BODY");
        }

        public virtual string PageUrl
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Document.PageUrl)));
            }
        }

        public virtual bool FrameDocument
        {
            get
            {
                return ((bool)(this.GetProperty(HtmlProperties.Document.FrameDocument)));
            }
        }

        public virtual bool RedirectingPage
        {
            get
            {
                return ((bool)(this.GetProperty(HtmlProperties.Document.RedirectingPage)));
            }
        }

        public virtual string AbsolutePath
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Document.AbsolutePath)));
            }
        }
    }
    // Definition of Class HtmlHyperlink.
    public class HtmlHyperlink : HtmlControl
    {

        public HtmlHyperlink() :
            this(null)
        {
        }

        public HtmlHyperlink(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Hyperlink.ControlType, "Hyperlink");
            SearchProperties.Add(HtmlProperties.Hyperlink.TagName, "A");
        }

        public virtual string AbsolutePath
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Hyperlink.AbsolutePath)));
            }
        }

        public virtual string Alt
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Hyperlink.Alt)));
            }
        }

        public virtual string Href
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Hyperlink.Href)));
            }
        }

        public virtual string Target
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Hyperlink.Target)));
            }
        }
    }
    // Definition of Class HtmlTable.
    public class HtmlTable : HtmlControl
    {

        public HtmlTable() :
            this(null)
        {
        }

        public HtmlTable(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Table.ControlType, "Table");
            SearchProperties.Add(HtmlProperties.Table.TagName, "TABLE");
        }

        public virtual UITestControlCollection Cells
        {
            get
            {
                return ((UITestControlCollection)(this.GetProperty(HtmlProperties.Table.Cells)));
            }
        }

        public virtual UITestControlCollection Rows
        {
            get
            {
                return ((UITestControlCollection)(this.GetProperty(HtmlProperties.Table.Rows)));
            }
        }

        public virtual int RowCount
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Table.RowCount)));
            }
        }

        public virtual int ColumnCount
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Table.ColumnCount)));
            }
        }

        public virtual int CellCount
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Table.CellCount)));
            }
        }
    }
    // Definition of Class HtmlSpan.
    public class HtmlSpan : HtmlControl
    {

        public HtmlSpan() :
            this(null)
        {
        }

        public HtmlSpan(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Pane.ControlType, "Pane");
            SearchProperties.Add(HtmlProperties.Pane.TagName, "SPAN");
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(HtmlProperties.Pane.DisplayText)));
            }
        }
    }
    // Definition of Class HtmlCell.
    public class HtmlCell : HtmlControl
    {

        public HtmlCell() :
            this(null)
        {
        }

        public HtmlCell(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "Web";
            SearchProperties.Add(HtmlProperties.Cell.ControlType, "Cell");
            SearchProperties.Add(HtmlProperties.Cell.TagName, "TD");
        }

        public virtual int RowIndex
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Cell.RowIndex)));
            }
        }

        public virtual int ColumnIndex
        {
            get
            {
                return ((int)(this.GetProperty(HtmlProperties.Cell.ColumnIndex)));
            }
        }
    }
    // Definition of Class WinButton.
    public class WinButton : WinControl
    {

        public WinButton() :
            this(null)
        {
        }

        public WinButton(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.Button.ControlType, "Button");
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Button.DisplayText)));
            }
        }

        public virtual string Shortcut
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Button.Shortcut)));
            }
        }
    }
    // Definition of Class WinTitleBar.
    public class WinTitleBar : WinControl
    {

        public WinTitleBar() :
            this(null)
        {
        }

        public WinTitleBar(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.TitleBar.ControlType, "TitleBar");
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.TitleBar.DisplayText)));
            }
        }
}
}
